generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  clerkUserId       String              @unique
  name              String
  tsimsStudentId    Int                 @unique
  ClubRating        ClubRating[]
  ReservationRecord ReservationRecord[]
  role              Roles               @default(MEMBER)
}

enum Roles {
  MEMBER
  ADMIN
}

model Club {
  id                        Int                 @id
  name                      Json
  foundedYear               Int?
  presidentByTsimsStudentId Int
  vicesByTsimsStudentId     Int[]
  membersByTsimsStudentId   Int[]
  description               Json
  ActivityRecord            ActivityRecord[]
  memberships               ClubMembership[]
  ClubRating                ClubRating[]
  FileUploadRecord          FileUploadRecord[]
  GroupInfo                 GroupInfo?
  ReservationRecord         ReservationRecord[]
}

model ClubMembership {
  id             String           @id @default(dbgenerated("gen_random_uuid()"))
  tsimsStudentId Int
  name           String
  clubId         Int
  role           ClubMemberRole
  club           Club             @relation(fields: [clubId], references: [id])
  ActivityRecord ActivityRecord[] @relation("ActivityRecordToClubMembership")

  @@unique([tsimsStudentId, clubId])
}

model File {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  fileId           String
  createdAt        DateTime          @default(now())
  FileUploadRecord FileUploadRecord?
}

model FileUploadRecord {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  clubId       Int
  fileId       String         @unique
  fileUploadId String
  createdAt    DateTime       @default(now())
  club         Club           @relation(fields: [clubId], references: [id])
  file         File           @relation(fields: [fileId], references: [id])
  fileUpload   FileCollection @relation(fields: [fileUploadId], references: [id])
}

model FileCollection {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  status           FormStatus
  fileNaming       String
  fileTypes        String[]
  FileUploadRecord FileUploadRecord[]

  @@map("FileUpload")
}

model ActivityRecord {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  clubId    Int
  date      DateTime
  text      String
  aTime     Float            @default(0)
  cTime     Float            @default(0)
  sTime     Float            @default(0)
  club      Club             @relation(fields: [clubId], references: [id])
  attendees ClubMembership[] @relation("ActivityRecordToClubMembership")
}

model ClubRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  rateBy    String
  clubId    Int
  rating    Int      @default(0)
  comment   String?
  ratedAt   DateTime @default(now())
  rateScope String
  club      Club     @relation(fields: [clubId], references: [id])
  user      User     @relation(fields: [rateBy], references: [clerkUserId])

  @@unique([clubId, rateBy, rateScope])
}

model GroupInfo {
  id                    String   @id @default(dbgenerated("gen_random_uuid()"))
  clubId                Int      @unique
  wechatGroupUrl        String
  wechatGroupExpiration DateTime @default(now())
  club                  Club     @relation(fields: [clubId], references: [id])
}

model ClassroomData {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  name              String              @unique
  alias             String?
  size              Int?
  ReservationRecord ReservationRecord[]
}

model ReservationRecord {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  creationTimestamp DateTime      @default(now())
  userId            String
  day               Days
  period            Periods
  classroomId       String
  clubId            Int
  note              String?
  classroom         ClassroomData @relation(fields: [classroomId], references: [id])
  club              Club          @relation(fields: [clubId], references: [id])
  user              User          @relation(fields: [userId], references: [id])

  @@unique([classroomId, day, period])
  @@unique([clubId, day, period])
}

enum FormStatus {
  OPEN
  CLOSED
}

enum ClubMemberRole {
  PRESIDENT
  VICE_PRESIDENT
  MEMBER
}

enum Days {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Periods {
  MORNING
  ONE
  TWO
  THREE
  FOUR
  NOON
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  AFTERCLASS
}
